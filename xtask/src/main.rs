use std::{
    env::consts::{ARCH, OS},
    path::Path,
};

fn main() {
    // poor man's argparse
    let args: Vec<_> = std::env::args().skip(1).collect();
    let args: Vec<_> = args.iter().map(|a| a.as_str()).collect();

    match args.as_slice() {
        ["generate-bindings"] => generate_bindings(),
        [] | ["-h" | "--help"] => {
            usage();
        }
        _ => {
            usage();
            std::process::exit(1);
        }
    }
}

fn usage() {
    println!("Usage:");
    println!("\txtask generate-bindings\t\tUpdate the lib3mf.h bindings");
}

/// Use Matklad's [*Self Modifying Code*][code] pattern to make sure our
/// generated bindings are always up to date without adding a build-time
/// dependency on bindgen.
///
/// [code]: https://matklad.github.io/2022/03/26/self-modifying-code.html
fn generate_bindings() {
    const LIB3MF_HEADER: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/../sys/vendor/lib3mf/Autogenerated/Bindings/C/lib3mf.h"
    ));
    const LIB3MF_TYPES_HEADER: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/../sys/vendor/lib3mf/Autogenerated/Bindings/C/lib3mf_types.h"
    ));
    let sys_dir = Path::new(env!("CARGO_MANIFEST_DIR"))
        .parent()
        .unwrap()
        .join("sys");
    let vendor_dir = sys_dir.join("sys/vendor/lib3mf/Autogenerated/Bindings/C/");

    let bindings = bindgen::builder()
        .header_contents(
            vendor_dir.join("lib3mf.hpp").to_str().unwrap(),
            LIB3MF_HEADER,
        )
        .header_contents(
            vendor_dir.join("lib3mf_types.h").to_str().unwrap(),
            LIB3MF_TYPES_HEADER,
        )
        .respect_cxx_access_specs(true)
        .allowlist_function("lib3mf.*")
        .allowlist_var("(?i).*3mf.*")
        .raw_line("#![allow(nonstandard_style)]")
        .generate()
        .unwrap()
        .to_string();
    let dest = sys_dir.join("src").join(format!("bindings.{ARCH}.{OS}.rs"));

    if let Ok(original) = std::fs::read_to_string(&dest) {
        if original == bindings {
            // All up to date
            return;
        }
    }

    if let Some(parent) = dest.parent() {
        let _ = std::fs::create_dir_all(parent);
    }
    std::fs::write(&dest, bindings.as_bytes()).unwrap();

    panic!(
        "\"{}\" was out-of-date. Re-run the command and commit the changes",
        dest.display()
    );
}
